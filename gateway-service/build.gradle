buildscript {
    repositories mavenRepositories
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
        classpath ("org.eclipse.jgit:org.eclipse.jgit:5.13.3.202401111512-r") {
            force = true
        }
    }
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply from: "$projectDir/gradle/lite.gradle"
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def debugPort = 5120
def componentName = "gateway-service"

setJib(componentName, debugPort)
jib.container.mainClass = 'org.zowe.apiml.gateway.GatewayApplication'

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additionalProperties = [
                by             : System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number         : System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine        : InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

configurations.all {
    resolutionStrategy {
        force (libraries.jetty_websocket_client)
    }
}

dependencies {
    api(project(':apiml-security-common'))
    implementation libraries.spring_boot_starter_webflux
    implementation(libraries.spring_boot_starter_actuator) {
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.springframework", module: "spring-core"
    }
    implementation(libraries.spring_boot_starter_web) {
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-webmvc"
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-core"
        exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-el"
        exclude group: "org.yaml", module: "snakeyaml"
        exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }

    implementation libraries.snakeyaml
    implementation libraries.tomcat_embed_el
    implementation libraries.spring_boot_starter_websocket
    implementation libraries.spring_boot_starter_thymeleaf
    implementation libraries.spring_boot_starter_cache
    implementation libraries.spring_boot_starter_aop
    implementation libraries.spring_cloud_starter_hystrix
    implementation libraries.spring_security_web
    implementation libraries.spring_security_config
    implementation libraries.spring_security_core
    implementation libraries.spring_security_crypto
    implementation libraries.xstream
    implementation libraries.json_smart

    implementation libraries.swagger3_parser
    implementation libraries.jackson_annotations
    implementation libraries.jackson_core
    implementation libraries.jackson_databind
    implementation libraries.tomcat_coyote
    implementation libraries.tomcat_annotations_api
    implementation libraries.tomcat_embed_core
    implementation libraries.tomcat_embed_websocket
    implementation(libraries.spring_cloud_starter_eureka){
        exclude group: "com.google.code.gson", module: "gson"
    }
    implementation libraries.gson
    implementation libraries.spring_cloud_commons
    implementation(libraries.spring_cloud_starter_bootstrap) {
        transitive false
    }
    implementation libraries.spring_cloud_starter_zuul
    implementation libraries.spring_cloud_starter_ribbon
    implementation libraries.jetty_websocket_common
    implementation libraries.jetty_websocket_client
    implementation libraries.jetty_client
    implementation libraries.jetty_http
    implementation libraries.jetty_io
    implementation libraries.jetty_util
    implementation libraries.jetty_websocket_api
    implementation libraries.jjwt
    implementation libraries.nimbusJoseJwt
    implementation libraries.thymeleaf
    implementation libraries.thymeleafSpring
    implementation libraries.logback_core
    implementation libraries.logback_classic

    implementation libraries.commons_io
    implementation libraries.guava
    implementation libraries.spring_aop
    implementation libraries.spring_beans
    implementation libraries.spring_context
    implementation libraries.spring_context_support
    implementation libraries.spring_core
    implementation libraries.spring_expression
    implementation libraries.spring_jcl
    implementation libraries.spring_messaging
    implementation libraries.spring_web
    implementation libraries.spring_webflux
    implementation libraries.spring_webmvc
    implementation libraries.spring_websocket

    implementation libraries.eh_cache
    implementation libraries.spring_retry
    implementation libraries.awaitility

    compileOnly libraries.javax_inject
    compileOnly libraries.lombok
    annotationProcessor libraries.lombok

    testImplementation libraries.mockito_core
    testImplementation libraries.spring_mock_mvc
    testImplementation(libraries.spring_boot_starter_test) {
        exclude group: "org.springframework", module: "spring-test"
    }
    testImplementation libraries.spring_test
    testImplementation libraries.json_smart
    testRuntimeOnly libraries.http_client
    testImplementation libraries.rest_assured
    testImplementation libraries.rest_assured_json_path
    testImplementation libraries.rest_assured_xml_path
    testImplementation libraries.javax_inject

    testImplementation libraries.lombok
    testAnnotationProcessor libraries.lombok

    testImplementation(testFixtures(project(":integration-tests")))

    runtimeOnly libraries.jjwt_impl
    runtimeOnly libraries.jjwt_jackson
}

bootJar {
    archiveFileName = "gateway-service.jar"
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    archiveClassifier = "application"
}

jar {
    enabled true
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
    systemProperties = System.properties
}

publishing {
    publications {
        mavenJavaLib(MavenPublication) {
            artifact jar
        }

        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml.sdk'
            artifactId = 'gateway-fat-jar'

            artifact bootJar
        }
    }
}
