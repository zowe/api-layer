eureka:
    instance:
        instanceId: ${apiml.service.hostname}:${apiml.service.id}:${apiml.service.port}
        hostname: ${apiml.service.hostname}
        #ports are computed in code
        homePageUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}/
        healthCheckUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}/application/health
        port: ${apiml.service.port}
        securePort: ${apiml.service.port}
        nonSecurePortEnabled: ${apiml.service.nonSecurePortEnabled}
        securePortEnabled: ${apiml.service.securePortEnabled}
        metadata-map:
            apiml:
                health:
                    protected: false
                catalog:
                    tile:
                        id: apimediationlayer
                        title:  API Mediation Layer API
                        description: The API Mediation Layer for z/OS internal API services. The API Mediation Layer provides a single point of access to mainframe REST APIs and offers enterprise cloud-like features such as high-availability, scalability, dynamic API discovery, and documentation.
                        version: 1.0.0
                routes:
                    api_v1:
                        gatewayUrl: /
                        serviceUrl: /
                apiInfo:
                    - apiId: zowe.apiml.gateway
                      version: 1.0.0
                      gatewayUrl: api/v1
                      swaggerUrl: https://${apiml.service.hostname}:${apiml.service.port}/gateway/api-docs
                      documentationUrl: https://zowe.github.io/docs-site/
                service:
                    title: API Gateway
                    description: API Gateway service to route requests to services registered in the API Mediation Layer and provides an API for mainframe security.
                    supportClientCertForwarding: true
                    apimlId: ${apiml.service.apimlId:${apiml.service.hostname}_${apiml.service.port}}
                    externalUrl: ${apiml.service.externalUrl:${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}}
                authentication:
                    sso: true
    client:
        fetchRegistry: true
        registerWithEureka: true
        region: default
        serviceUrl:
            defaultZone: ${apiml.service.discoveryServiceUrls}
        healthcheck:
            enabled: true

spring:
    cloud:
        gateway:
            filter:
                secure-headers:
                    disable: content-security-policy,permitted-cross-domain-policies,download-options
                    referrer-policy: strict-origin-when-cross-origin
                    frame-options: sameorigin
    application:
        name: gateway
    security:
        oauth2:
            client:
                registration:
                    okta:
                        redirectUri: "{baseUrl}/gateway/{action}/oauth2/code/{registrationId}"

springdoc:
    api-docs:
        path: /gateway/api-docs
    writer-with-order-by-keys: true
apiml:
    catalog:
        serviceId: apicatalog
        registry:
            enabled: false
            metadata-key-allow-list: zos.sysname,zos.system,zos.sysplex,zos.cpcName,zos.zosName,zos.lpar
    connection:
        timeout: 60000
        idleConnectionTimeoutSeconds: 5
        timeToLive: 10000
    routing:
        instanceIdHeader: false
    service:
        apimlId: apiml1
        corsEnabled: true
        allowEncodedSlashes: true
        discoveryServiceUrls: https://localhost:10011/eureka/
        forwardClientCertEnabled: false
        hostname: localhost
        id: ${spring.application.name}
        ignoredHeadersWhenCorsEnabled: Access-Control-Request-Method,Access-Control-Request-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods,Access-Control-Allow-Headers,Access-Control-Allow-Credentials,Origin
        port: 10010
        scheme: https  # "https" or "http"
        preferIpAddress: false
        nonSecurePortEnabled: false
        securePortEnabled: true
    security:
        headersToBeCleared: X-Certificate-Public,X-Certificate-DistinguishedName,X-Certificate-CommonName
        ssl:
            nonStrictVerifySslCertificatesOfServices: false

server:
    http2:
        enabled: false
    port: ${apiml.service.port}
    ssl:
        clientAuth: want
        keyAlias: localhost
        keyPassword: password
        keyStore: keystore/localhost/localhost.keystore.p12
        keyStorePassword: password
        keyStoreType: PKCS12
        trustStore: keystore/localhost/localhost.truststore.p12
        trustStorePassword: password
        trustStoreType: PKCS12

    cloud:
        gateway:
            discovery:
                locator:
                    enabled: false
                    lowerCaseServiceId: true
    application:
        name: gateway
    main:
        allow-circular-references: true

logbackServiceName: ZWEAGW1

logging:
    level:
        ROOT: INFO
        com.netflix: WARN
        org.springframework.cloud.gateway.filter: WARN
        org.springframework.cloud.gateway.route: WARN
        org.springframework.context.support: WARN
        reactor.netty.http.client: INFO
        reactor.netty.http.client.HttpClientConnect: OFF

management:
    endpoint:
      gateway:
          enabled: false
      health:
          showDetails: always
      shutdown:
          enabled: true
    endpoints:
        web:
            base-path: /application
            exposure:
                include: health,info,gateway,shutdown
---
spring.config.activate.on-profile: debug

logging:
    level:
        org.zowe.apiml: DEBUG
        org.springframework.cloud.gateway: DEBUG
        org.springframework.security: DEBUG
        org.springframework.web.reactive: DEBUG
        reactor.netty.http.client: DEBUG
        reactor.netty.http.client.HttpClient: DEBUG
        reactor.netty.http.client.HttpClientConnect: DEBUG
        com.netflix: DEBUG

---
spring.config.activate.on-profile: attls

server:
    attls:
        enabled: true
    ssl:
        enabled: false

    service:
        scheme: http
apiml:
    service:
        corsEnabled: true
        scheme: http
        nonSecurePortEnabled: true
        securePortEnabled: false
