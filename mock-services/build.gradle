buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6303
def debugPort = 5123
def componentName = "mock-services"

setJib(componentName, javaAgentPort, debugPort)

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }

    debugOptions {
        port = 5013
        suspend = false
        server = true
    }

    workingDir = project.rootDir

    systemProperties = System.properties
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    implementation libs.jjwt
    implementation libs.jjwt.impl
    implementation libs.jjwt.jackson
    implementation libs.apache.commons.lang3
    implementation libs.nimbusJoseJwt
    implementation libs.jackson.databind

    implementation libs.spring.boot.starter
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.web
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.spring.boot.starter.websocket
    implementation libs.tomcat.annotations.api
    implementation libs.tomcat.embed.el
    implementation libs.tomcat.embed.core
    implementation libs.tomcat.embed.websocket
    implementation libs.logback.classic

    implementation libs.spring.aop
    implementation libs.spring.beans
    implementation libs.spring.context
    implementation libs.spring.core
    implementation libs.spring.expression
    implementation libs.spring.web
    implementation libs.spring.websocket
    implementation libs.spring.messaging
    implementation libs.spring.webmvc

    implementation libs.jquery

    implementation libs.gson
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testImplementation libs.spring.boot.starter.test
    testImplementation libs.jjwt
    testImplementation libs.jjwt.impl
    testImplementation libs.jjwt.jackson
    testImplementation libs.json.smart

}


bootJar.archiveFileName = bootJar.archiveBaseName.get() + ".jar"
