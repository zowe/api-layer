buildscript {
    repositories {
        maven {
            setUrl('https://plugins.gradle.org/m2/')
        }
    }
    dependencies {
        classpath libs.gradle.test.logger
    }
}

plugins {
    alias(libs.plugins.test.logger)
    id "java-test-fixtures"
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation libs.http.client
    testImplementation libs.eureka.client
    testImplementation libs.jackson.dataformat.yaml
    testImplementation libs.json.path
    testImplementation libs.spring.boot.starter.websocket
    testImplementation libs.spring.boot.starter.actuator
    testImplementation libs.spring.boot.starter.webflux
    testImplementation libs.spring.web.test.client
    testImplementation libs.spring4Test
    testImplementation libs.json
    testImplementation libs.json.smart
    testImplementation libs.jjwt
    testImplementation libs.jjwt.impl
    testImplementation libs.reactorTest
    testImplementation libs.bcpkix;
    testImplementation project(':apiml-security-common')
    testImplementation project(':zaas-client')

    testImplementation libs.hamcrest
    testImplementation libs.awaitility
    testImplementation libs.logback.classic
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    testImplementation libs.rest.assured
    testImplementation libs.jackson.annotations
    testImplementation libs.jackson.core
    testImplementation libs.jackson.databind
    testImplementation libs.jackson.dataformat.yaml
    testImplementation libs.javax.servlet.api
    testImplementation libs.assertj.core
    testImplementation libs.nimbusJoseJwt
    runtimeOnly libs.jjwt.impl
    runtimeOnly libs.jjwt.jackson

    testFixturesImplementation(project(':apiml-security-common'))
    testFixturesImplementation libs.spring.core
    testFixturesImplementation libs.slf4j.api
    testFixturesImplementation libs.rest.assured
    testFixturesImplementation libs.lombok
    testFixturesImplementation libs.http.client

    testFixturesAnnotationProcessor libs.lombok
}

jar {
    archiveBaseName.set("integration-tests")
}

test.enabled = false

apply plugin: 'java'

test {
    testLogging.showStandardStreams = true
    systemProperty "externalJenkinsToggle", System.getProperty("externalJenkinsToggle")
}

task startUpCheck(type: Test) {
    group 'integration tests'
    description "Check that the API Mediation Layer is up and runnig"

    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags 'StartupCheck'
    }
    outputs.upToDateWhen { false }
}

task environmentCheck(type: Test) {
    group 'integration tests'
    description "Check that the Integration environment is healthy"

    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags 'EnvironmentCheck'
    }
    outputs.upToDateWhen { false }
}


task runStartUpCheck(type: Test) {
    group 'integration tests'
    description "Check that the API Mediation Layer is up and running"

    systemProperties System.properties
    useJUnitPlatform {
        includeTags 'StartupCheck'
    }
    outputs.upToDateWhen { false }
}

task runLocalIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run integration tests that are not dependent on mainframe"

    dependsOn startUpCheck
    systemProperties System.getProperties()
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'MainframeDependentTests',
            'AdditionalLocalTest',
            'HATest',
            'ChaoticHATest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest'
        )
    }
    outputs.upToDateWhen { false }
}

task runAllIntegrationTestsNormal(type: Test) {
    group "Integration tests"
    description "Run all integration tests normal"
    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'AdditionalLocalTest',
            'NotForMainframeTest',
            'zOSMFAuthTest',
            'SAFAuthTest',
            'HATest',
            'ChaoticHATest',
            'NotAttlsTest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest',
            'HealthEndpointProtectionDisabledTest'
        )

    }
}

task runAllIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run all integration tests"

    dependsOn startUpCheck, runAllIntegrationTestsNormal
    tasks.findByName('runAllIntegrationTestsNormal').mustRunAfter 'startUpCheck'
    String itags = System.getProperty("includeTags") ?
        System.getProperty("includeTags") : 'zOSMFAuthTest'
    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags(
            itags
        )
    }
    outputs.upToDateWhen { false }
}

task runAllIntegrationTestsForZoweTestingOnZos(type: Test) {
    // This task is intended to run on z/OS systems with some limitations:
    // Only 1 Gateway
    // z/OSMF Authentication provider only
    // No support for SAF ID Tokens

    group "Integration tests"
    description "Run all integration tests for Zowe testing on z/OS (limited)"

    def targetSystem = System.getenv("ZOS_TARGET_SYS") ? "-" + System.getenv("ZOS_TARGET_SYS") : ""
    systemProperty "environment.config", targetSystem
    systemProperty "environment.offPlatform", "true"
    systemProperty "environment.zos.target", "true"
    systemProperties System.properties
    systemProperties.remove('java.endorsed.dirs')

    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'AdditionalLocalTest',
            'TestsNotMeantForZowe',
            'DiscoverableClientDependentTest',
            'HATest',
            'ChaoticHATest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest',
            'NotForMainframeTest',
            'ApiCatalogStandaloneTest',
            'SAFProviderTest',
            'CloudGatewayProxyTest',
            'SafIdTokenTest'
        )
    }
    outputs.upToDateWhen { false }
}

task runAllIntegrationTestsForZoweTesting(type: Test) {
    group "Integration tests"
    description "Run all integration tests for Zowe testing"

    systemProperty "environment.offPlatform", "true"
    systemProperties System.properties

    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'AdditionalLocalTest',
            'TestsNotMeantForZowe',
            'DiscoverableClientDependentTest',
            'HATest',
            'ChaoticHATest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest',
            'NotForMainframeTest'
        )
    }
    outputs.upToDateWhen { false }
}

task runCITests(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }

    systemProperties System.properties
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'AdditionalLocalTest',
            'MainframeDependentTests',
            'SAFAuthTest',
            'AttlsTest',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'HATest',
            'ChaoticHATest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest',
            'HealthEndpointProtectionDisabledTest'
        )
    }
}

task runContainerTests(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }
    systemProperty "environment.config", "-docker"
    systemProperty "environment.offPlatform", "true"

    systemProperties System.properties
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'AdditionalLocalTest',
            'MainframeDependentTests',
            'SAFAuthTest',
            'AttlsTest',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'NodeEnablerTest',
            'HATest',
            'ChaoticHATest',
            'InfinispanStorageTest',
            'OktaOauth2Test',
            'CloudGatewayProxyTest',
            'CloudGatewayServiceRouting',
            'CloudGatewayCentralRegistry',
            'ZaasTest',
            'HealthEndpointProtectionDisabledTest'
        )
    }
}

task runBaseTests(type: Test) {
    group "integration tests"
    description "Run base tests"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CatalogTest',
            'GatewayTest',
            'DiscoveryServiceTest',
            'WebsocketTest',
            'GeneralAuthenticationTest',
            'DiscoverableClientDependentTest',
            'CachingServiceTest',
            'MetricsServiceTest',
            'WebsocketTest'
        )
        excludeTags(
            'MainframeDependentTests',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'NodeEnablerTest',
            'HATest',
            'ChaoticHATest',
            'InfinispanStorageTest',
            'OktaOauth2Test',
            'CloudGatewayProxyTest',
            'CloudGatewayServiceRouting',
            'CloudGatewayCentralRegistry',
            'MultipleRegistrationsTest',
            'HealthEndpointProtectionDisabledTest'
        )
    }
}

task runRegistrationTests(type: Test) {
    group "integration tests"
    description "Run tests verifying registration and deregistration"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'RegistrationTest'
        )
    }
}

task runCloudGatewayProxyTest(type: Test) {
    group "integration tests"
    description "Run tests verifying cloud gateway can route to correct gateway"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CloudGatewayProxyTest'
        )
    }
}
task runCloudGatewayServiceRoutingTest(type: Test) {
    group "integration tests"
    description "Run tests verifying cloud gateway can locate service and translate auth scheme"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CloudGatewayServiceRouting'
        )
    }
}

task runCloudGatewayCentralRegistryTest(type: Test) {
    group "integration tests"
    description "Run tests verifying cloud gateway central registry endpoint"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CloudGatewayCentralRegistry'
        )
    }
}

task runOidcTests(type: Test) {
    group "integration tests"
    description "Run tests verifying integration with oauth2 provider(okta)"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'OktaOauth2Test'
        )
    }
}

task runIdPrefixReplacerTests(type: Test) {
    group "integration tests"
    description "Run Integration Test verifying the service ID prefix replacer mechanism"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'ServiceIdPrefixReplacerTest'
        )
    }
}

task runZosmfAuthTest(type: Test) {
    group "integration tests"
    description "Run zOSMF dependant authentication tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'zOSMFAuthTest'
        )
        excludeTags(
            'InfinispanStorageTest'
        )
    }
}

task runZaasTest(type: Test) {
    group "integration tests"
    description "Run Zaas tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'ZaasTest',
            'HealthEndpointProtectionDisabledTest'
        )
    }
}

task runCachingServiceTests(type: Test) {
    group "integration tests"
    description "Run Caching service tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CachingServiceTest'
        )
        excludeTags(
            'InfinispanStorageTest'
        )
    }
}

task runInfinispanServiceTests(type: Test) {
    group "integration tests"
    description "Run Caching service with infinispan storage tests"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CachingServiceTest',
            'InfinispanStorageTest'
        )
    }
}

task runBaseTestsInternalPort(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }

    dependsOn runBaseTests
    systemProperties System.properties
    systemProperty "gateway.port", System.getProperty("internal.gateway.port")
}

task runHATests(type: Test) {
    group "Integration tests"
    description "Run tests verifying High Availability"
    dependsOn startUpCheck

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperty "cloudGateway.enabled", false
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'HATest'
        )
    }

}

task runLbHaTests(type: Test) {
    group "Integration tests"
    description "Run tests verifying Load balancing under High Availability"

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'LbHaTest'
        )
    }

}

task runChaoticHATests(type: Test) {
    group "Integration tests"
    description "Run Chaotic tests verifying High Availability"
    dependsOn startUpCheck

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperty "cloudGateway.enabled", false
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'ChaoticHATest'
        )
    }

}
