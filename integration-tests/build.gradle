buildscript {
    repositories {
        maven {
            setUrl('https://plugins.gradle.org/m2/')
        }
    }
    dependencies {
        classpath libs.gradle.test.logger
    }
}

plugins {
    alias(libs.plugins.test.logger)
    id "java-test-fixtures"
}

repositories {
    mavenCentral()
}

configurations.all {
    // Remove Spring Cloud enabler
    exclude group: "org.springframework.cloud", module: "spring-cloud-starter-netflix-eureka-client"
}

dependencies {
    testImplementation project(':apiml-security-common')
    testImplementation project(':zaas-client')
    testImplementation group: 'org.springframework.graphql', name: 'spring-graphql-test', version: '1.3.1'


    testImplementation libs.spring.boot.starter.actuator
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.spring.boot.starter.websocket
    testImplementation libs.spring.webflux
    testImplementation libs.jjwt.impl

    testImplementation libs.bcpkix;
    testImplementation libs.jackson.dataformat.yaml
    testImplementation libs.jjwt
    testImplementation libs.netty.reactor.http
    testImplementation libs.nimbus.jose.jwt
    testImplementation libs.reactor.test
    testImplementation libs.rest.assured

    runtimeOnly libs.jjwt.impl
    runtimeOnly libs.jjwt.jackson

    testFixturesImplementation libs.spring.boot.starter
    testFixturesImplementation libs.rest.assured

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testFixturesImplementation libs.lombok
    testFixturesAnnotationProcessor libs.lombok
}

jar {
    archiveBaseName.set("integration-tests")
}

test.enabled = false

apply plugin: 'java'

tasks.withType(Test) {
    jvmArgs '--add-opens=java.base/java.nio.channels.spi=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.io=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.util=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.lang=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
    jvmArgs '--add-opens=java.base/javax.net.ssl=ALL-UNNAMED'
}

test {
    testLogging.showStandardStreams = true
    systemProperty "externalJenkinsToggle", System.getProperty("externalJenkinsToggle")
}

task startUpCheck(type: Test) {
    group 'integration tests'
    description "Check that the API Mediation Layer is up and runnig"

    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags 'StartupCheck'
    }
    outputs.upToDateWhen { false }
}

task environmentCheck(type: Test) {
    group 'integration tests'
    description "Check that the Integration environment is healthy"

    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags 'EnvironmentCheck'
    }
    outputs.upToDateWhen { false }
}


task runStartUpCheck(type: Test) {
    group 'integration tests'
    description "Check that the API Mediation Layer is up and running"

    systemProperties System.properties
    useJUnitPlatform {
        includeTags 'StartupCheck'
    }
    outputs.upToDateWhen { false }
}

task runLocalIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run integration tests that are not dependent on mainframe"

    dependsOn startUpCheck
    systemProperties System.getProperties()
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'MainframeDependentTests',
            'AdditionalLocalTest',
            'HATest',
            'ChaoticHATest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest'
        )
    }
    outputs.upToDateWhen { false }
}

task runAllIntegrationTestsNormal(type: Test) {
    group "Integration tests"
    description "Run all integration tests normal"
    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'AdditionalLocalTest',
            'NotForMainframeTest',
            'zOSMFAuthTest',
            'SAFAuthTest',
            'HATest',
            'ChaoticHATest',
            'NotAttlsTest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest'
        )

    }
}

task runAllIntegrationTests(type: Test) {
    group "Integration tests"
    description "Run all integration tests"

    dependsOn startUpCheck, runAllIntegrationTestsNormal
    tasks.findByName('runAllIntegrationTestsNormal').mustRunAfter 'startUpCheck'
    String itags = System.getProperty("includeTags") ?
        System.getProperty("includeTags") : 'zOSMFAuthTest'
    systemProperties System.properties
    systemProperty "environment.offPlatform", true
    useJUnitPlatform {
        includeTags(
            itags
        )
    }
    outputs.upToDateWhen { false }
}

task runAllIntegrationTestsForZoweTestingOnZos(type: Test) {
    // This task is intended to run on z/OS systems with some limitations:
    // Only 1 Gateway
    // z/OSMF Authentication provider only
    // No support for SAF ID Tokens

    group "Integration tests"
    description "Run all integration tests for Zowe testing on z/OS (limited)"

    def targetSystem = System.getenv("ZOS_TARGET_SYS") ? "-" + System.getenv("ZOS_TARGET_SYS") : ""
    systemProperty "environment.config", targetSystem
    systemProperty "environment.offPlatform", "true"
    systemProperty "environment.zos.target", "true"
    systemProperties System.properties
    systemProperties.remove('java.endorsed.dirs')

    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'AdditionalLocalTest',
            'TestsNotMeantForZowe',
            'DiscoverableClientDependentTest',
            'HATest',
            'ChaoticHATest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest',
            'NotForMainframeTest',
            'ApiCatalogStandaloneTest',
            'SAFProviderTest',
            'GatewayProxyTest',
            'SafIdTokenTest'
        )
    }
    outputs.upToDateWhen { false }
}

task runAllIntegrationTestsForZoweTesting(type: Test) {
    group "Integration tests"
    description "Run all integration tests for Zowe testing"

    systemProperty "environment.offPlatform", "true"
    systemProperties System.properties

    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'AdditionalLocalTest',
            'TestsNotMeantForZowe',
            'DiscoverableClientDependentTest',
            'HATest',
            'ChaoticHATest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest',
            'NotForMainframeTest'
        )
    }
    outputs.upToDateWhen { false }
}

task runCITests(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }

    systemProperties System.properties
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'AdditionalLocalTest',
            'MainframeDependentTests',
            'SAFAuthTest',
            'AttlsTest',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'HATest',
            'DeterministicLbHaTest',
            'StickySessionLbHaTest',
            'ChaoticHATest',
            'OktaOauth2Test',
            'MultipleRegistrationsTest'
        )
    }
}

task runContainerTests(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }
    systemProperty "environment.config", "-docker"
    systemProperty "environment.offPlatform", "true"

    systemProperties System.properties
    useJUnitPlatform {
        excludeTags(
            'StartupCheck',
            'EnvironmentCheck',
            'SlowTests',
            'AdditionalLocalTest',
            'MainframeDependentTests',
            'SAFAuthTest',
            'AttlsTest',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'NodeEnablerTest',
            'HATest',
            'ChaoticHATest',
            'InfinispanStorageTest',
            'OktaOauth2Test',
            'GatewayProxyTest',
            'GatewayServiceRouting',
            'GatewayCentralRegistry',
            'ZaasTest'
        )
    }
}

task runBaseTests(type: Test) {
    group "integration tests"
    description "Run base tests"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CatalogTest',
            'GatewayTest',
            'DiscoveryServiceTest',
            'WebsocketTest',
            'GeneralAuthenticationTest',
            'DiscoverableClientDependentTest',
            'CachingServiceTest',
            'WebsocketTest'
        )
        excludeTags(
            'MainframeDependentTests',
            'RegistrationTest',
            'ServiceIdPrefixReplacerTest',
            'NodeEnablerTest',
            'HATest',
            'ChaoticHATest',
            'InfinispanStorageTest',
            'OktaOauth2Test',
            'GatewayProxyTest',
            'GatewayServiceRouting',
            'GatewayCentralRegistry',
            'MultipleRegistrationsTest'
        )
    }
}

task runRegistrationTests(type: Test) {
    group "integration tests"
    description "Run tests verifying registration and deregistration"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'RegistrationTest'
        )
    }
}

task runGatewayProxyTest(type: Test) {
    group "integration tests"
    description "Run tests verifying central gateway can route to correct gateway"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'GatewayProxyTest'
        )
    }
}
task runGatewayServiceRoutingTest(type: Test) {
    group "integration tests"
    description "Run tests verifying central gateway can locate service and translate auth scheme"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'GatewayServiceRouting'
        )
    }
}

task runGatewayCentralRegistryTest(type: Test) {
    group "integration tests"
    description "Run tests verifying central gateway central registry endpoint"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'GatewayCentralRegistry'
        )
    }
}

task runOidcTests(type: Test) {
    group "integration tests"
    description "Run tests verifying integration with oauth2 provider(okta)"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'OktaOauth2Test'
        )
    }
}

task runIdPrefixReplacerTests(type: Test) {
    group "integration tests"
    description "Run Integration Test verifying the service ID prefix replacer mechanism"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'ServiceIdPrefixReplacerTest'
        )
    }
}

task runZosmfAuthTest(type: Test) {
    group "integration tests"
    description "Run zOSMF dependant authentication tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'zOSMFAuthTest'
        )
        excludeTags(
            'InfinispanStorageTest'
        )
    }
}

task runZaasTest(type: Test) {
    group "integration tests"
    description "Run Zaas tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'ZaasTest'
        )
    }
}

task runCachingServiceTests(type: Test) {
    group "integration tests"
    description "Run Caching service tests only"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CachingServiceTest'
        )
        excludeTags(
            'InfinispanStorageTest'
        )
    }
}

task runInfinispanServiceTests(type: Test) {
    group "integration tests"
    description "Run Caching service with infinispan storage tests"

    outputs.cacheIf { false }

    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'CachingServiceTest',
            'InfinispanStorageTest'
        )
    }
}

task runBaseTestsInternalPort(type: Test) {
    group "Integration tests"
    description "Run only tests without long tests"

    outputs.cacheIf { false }

    dependsOn runBaseTests
    systemProperties System.properties
    systemProperty "gateway.port", System.getProperty("internal.gateway.port")
}

task runHATests(type: Test) {
    group "Integration tests"
    description "Run tests verifying High Availability"

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'HATest'
        )
    }

}

task runDeterministicLbHaTests(type: Test) {
    group "Integration tests"
    description "Run tests verifying Deterministic Load balancing under High Availability"

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'DeterministicLbHaTest'
        )
    }

}

task runStickySessionLbHaTests(type: Test) {
    group "Integration tests"
    description "Run tests verifying Distrubuted Load balancing under High Availability"

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'StickySessionLbHaTest'
        )
    }

}

task runChaoticHATests(type: Test) {
    group "Integration tests"
    description "Run Chaotic tests verifying High Availability"

    outputs.cacheIf { false }

    systemProperty "environment.ha", true
    systemProperties System.getProperties()
    useJUnitPlatform {
        includeTags(
            'ChaoticHATest'
        )
    }

}
