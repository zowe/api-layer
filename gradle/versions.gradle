dependencyResolutionManagement {
    versionCatalogs {
        libs {
            // for node projects
            version('projectNode', '18.20.4')
            version('projectNpm', '9.9.3')

            version('springBoot', '3.3.4')
            version('springBootGraphQl', '3.3.4')
            version('springCloudNetflix', '4.1.3')
            version('springCloudCommons', '4.1.4')
            version('springCloudCB', '3.1.2')
            version('springCloudGateway', '4.1.5')
            version('springFramework', '6.1.13')
            version('springRetry', '2.0.9')

            version('glassfishHk2', '3.1.1')
            version('zosUtils', '2.0.5')
            version('aws', '1.12.772')
            version('awaitility', '4.2.2')
            version('bouncyCastle', '1.78.1')
            version('caffeine', '3.1.8')
            version('checkerQual', '3.43.0')
            version('commonsLang3', '3.17.0')
            version('commonsLogging', '1.3.4')
            version('commonsText', '1.12.0')
            version('commonsIo', '2.17.0')
            version('ehCache', '3.10.8')
            version('eureka', '2.0.3')
            version('netflixServo', '0.13.2')
            version('googleErrorprone', '2.32.0')
            version('gradleGitProperties', '2.4.2') // Used in classpath dependencies
            version('gradleNode', '3.6.0') // Used in classpath dependencies
            version('guava', '33.3.1-jre')
            // version('hamcrest', '1.3')
            version('hamcrest', '2.2')
            version('httpClient4', '4.5.14')
            version('httpClient5', '5.4')
            version('infinispan', '15.0.8.Final')
            version('jacksonCore', '2.17.2')
            version('jacksonDatabind', '2.17.2')
            version('jacksonDataformatYaml', '2.17.2')
            version('janino', '3.1.12')
            version('jakartaValidation', '3.1.0')
            version('jakartaInject', '2.0.1')
            version('jakartaServlet', '6.1.0')
            version('javaxAnnotation', '1.3.2')
            version('jaxbApi') {
                strictly '[2.3.3,3.0.0['
                prefer '2.3.3'
            }
            version('jaxbImpl') {
                strictly '[2.3.9,3.0.0['
                prefer '2.3.9'
            }
            version('jbossLogging', '3.6.0.Final')
            version('jerseySun', '1.19.4')
            version('jettyWebSocketClient', '9.4.56.v20240826')
            version('jettison', '1.5.4')
            //0.12.x version contains breaking changes
            version('jjwt', '0.12.6')
            version('jodaTime', '2.12.7')
            version('jsonPath', '2.9.0')
            version('jsonSmart', '2.5.1')
            version('junitJupiter', '5.11.0')
            version('junitPlatform', '1.11.0')
            version('lettuce', '6.4.0.RELEASE')
            // force version in build.gradle file - compatibility with Slf4j
            version('log4j', '2.24.0')
            version('lombok', '1.18.34')
            version('netty', '4.1.113.Final')
            version('nettyReactor', '1.1.22')
            version('nimbusJoseJwt', '9.41.1')
            version('openApiDiff', '2.0.1')
            version('picocli', '4.7.6')

            version('reactor', '3.6.10')
            version('restAssured', '5.5.0')
            version('rhino', '1.7.15')
            version('springDoc', '2.6.0')
            version('swaggerInflector', '2.0.12')
            version('swagger2Parser', '1.0.71')
            version('swagger3Parser', '2.1.22')
            version('thymeleaf', '3.1.2.RELEASE')
            version('velocity', '2.4')
            version('woodstoxCore', '6.7.0')
            version('xstream') {
                // older versions are vulnerable to CVE-2022-40151, CVE-2022-40152, and CVE-2022-41966
                strictly '[1.4.20,2.0['
                prefer '1.4.20'
            }
            version('jgit', '6.10.0.202406032230-r')
            version('gradleNode', '7.0.2')
            version('sonarGradlePlugin', '5.1.0.4882')
            version('gradleRelease', '3.0.2')
            version('gradleLicencer', '0.6.1')
            version('gradleJibPlugin', '3.2.1')
            version('taskTree', '2.1.1')
            version('reactorBom', '2023.0')
            version('gradleTestLogger', '4.0.0')
            version('testLogger', '4.0.0')
            version('micronautPlatform', '4.6.1')
            version('micronaut', '4.6.5')
            version('micronautPlugin', '4.4.2')
            version('shadow', '8.1.1')
            version('checkstyle', '10.17.0')
            version('jacoco', '0.8.11')
            version('gradle', '8.6')
            version('commonsCompress', '1.27.1')

            library('zowe_zos_utils', 'org.zowe.apiml.sdk', 'zos-utils').versionRef('zosUtils')
            library('spring_boot_configuration_processor', 'org.springframework.boot', 'spring-boot-configuration-processor').versionRef('springBoot')
            library('spring_boot_dependencies', 'org.springframework.boot', 'spring-boot-dependencies').versionRef('springBoot')
            library('spring_boot_starter', 'org.springframework.boot', 'spring-boot-starter').versionRef('springBoot')
            library('spring_boot_starter_actuator', 'org.springframework.boot', 'spring-boot-starter-actuator').versionRef('springBoot')
            library('spring_boot_starter_security', 'org.springframework.boot', 'spring-boot-starter-security').versionRef('springBoot')
            library('spring_boot_starter_validation', 'org.springframework.boot', 'spring-boot-starter-validation').versionRef('springBoot')
            library('spring_boot_starter_web', 'org.springframework.boot', 'spring-boot-starter-web').versionRef('springBoot')
            library('spring_boot_starter_websocket', 'org.springframework.boot', 'spring-boot-starter-websocket').versionRef('springBoot')
            library('spring_boot_starter_test', 'org.springframework.boot', 'spring-boot-starter-test').versionRef('springBoot')
            library('spring_boot_starter_aop', 'org.springframework.boot', 'spring-boot-starter-aop').versionRef('springBoot')
            library('spring_boot_starter_thymeleaf', 'org.springframework.boot', 'spring-boot-starter-thymeleaf').versionRef('springBoot')
            library('spring_boot_starter_cache', 'org.springframework.boot', 'spring-boot-starter-cache').versionRef('springBoot')
            library('spring_boot_starter_webflux', 'org.springframework.boot', 'spring-boot-starter-webflux').versionRef('springBoot')
            library('spring_boot_starter_oauth2_client', 'org.springframework.boot', 'spring-boot-starter-oauth2-client').versionRef('springBoot')

            library('spring_cloud_starter_eureka_client', 'org.springframework.cloud', 'spring-cloud-starter-netflix-eureka-client').versionRef('springCloudNetflix')
            library('spring_cloud_starter_eureka_server', 'org.springframework.cloud', 'spring-cloud-starter-netflix-eureka-server').versionRef('springCloudNetflix')
            library('spring_cloud_starter_gateway', 'org.springframework.cloud', 'spring-cloud-starter-gateway').versionRef('springCloudGateway')
            library('spring_cloud_commons', 'org.springframework.cloud', 'spring-cloud-commons').versionRef('springCloudCommons')
            library('spring_cloud_circuit_breaker', 'org.springframework.cloud', 'spring-cloud-starter-circuitbreaker-reactor-resilience4j').versionRef('springCloudCB')

            library('spring_retry', 'org.springframework.retry', 'spring-retry').versionRef('springRetry')
            library('spring_context', 'org.springframework', 'spring-context').versionRef('springFramework')
            library('spring_webflux', 'org.springframework', 'spring-webflux').versionRef('springFramework')
            library('spring_bom', 'org.springframework', 'spring-framework-bom').versionRef('springFramework')
            library('spring_web', 'org.springframework', 'spring-web').versionRef('springFramework')
            library('spring_tx', 'org.springframework', 'spring-tx').versionRef('springFramework')
            library('spring_webmvc', 'org.springframework', 'spring-webmvc').versionRef('springFramework')
            library('spring_context_support', 'org.springframework', 'spring-context-support').versionRef('springFramework')
            library('spring_beans', 'org.springframework', 'spring-beans').versionRef('springFramework')

            library('apache_commons_lang3', 'org.apache.commons', 'commons-lang3').versionRef('commonsLang3')
            library('apache_commons_logging', 'commons-logging', 'commons-logging').versionRef('commonsLogging') // to define minimum version and avoid duplicity libraries in the classpath
            library('apache_commons_text', 'org.apache.commons', 'commons-text').versionRef('commonsText')

            library('aopalliance', 'org.glassfish.hk2.external', 'aopalliance-repackaged').versionRef('glassfishHk2') // to define minimum version and avoid duplicity libraries in the classpath
            library('hk2_api', 'org.glassfish.hk2', 'hk2-api').versionRef('glassfishHk2') // to define minimum version and avoid duplicity libraries in the classpath
            library('apache_velocity', 'org.apache.velocity', 'velocity-engine-core').versionRef('velocity')
            library('awaitility', 'org.awaitility', 'awaitility').versionRef('awaitility')
            library('aws_bom', 'com.amazonaws', 'aws-java-sdk-bom').versionRef('aws')
            library('bcprov', 'org.bouncycastle', 'bcprov-jdk18on').versionRef('bouncyCastle')
            library('bcpkix', 'org.bouncycastle', 'bcpkix-jdk18on').versionRef('bouncyCastle')
            library('caffeine', 'com.github.ben-manes.caffeine', 'caffeine').versionRef('caffeine')
            library('checker_qual', 'org.checkerframework', 'checker-qual').versionRef('checkerQual')
            library('commons_io', 'commons-io', 'commons-io').versionRef('commonsIo')
            library('eh_cache', 'org.ehcache', 'ehcache').versionRef('ehCache')
            library('eureka_jersey_client', 'com.netflix.eureka', 'eureka-client-jersey3').versionRef('eureka')
            library('google_errorprone', 'com.google.errorprone', 'error_prone_annotations').versionRef('googleErrorprone') // to define minimum version and avoid duplicity libraries in the classpath
            library('guava', 'com.google.guava', 'guava').versionRef('guava')
            library('hamcrest', 'org.hamcrest', 'hamcrest').versionRef('hamcrest')
            library('http_client4', 'org.apache.httpcomponents', 'httpclient').versionRef('httpClient4') // to define minimum version and avoid duplicity libraries in the classpath
            library('http_client5', 'org.apache.httpcomponents.client5', 'httpclient5').versionRef('httpClient5')
            library('javax_annotation', 'javax.annotation', 'javax.annotation-api').versionRef('javaxAnnotation') // to define minimum version and avoid duplicity libraries in the classpath
            library('netflix_servo', 'com.netflix.servo', 'servo-core').versionRef('netflixServo')

            library('infinispan_spring_boot3_starter_embedded', 'org.infinispan', 'infinispan-spring-boot3-starter-embedded').versionRef('infinispan')
            library('infinispan_lock', 'org.infinispan', 'infinispan-clustered-lock').versionRef('infinispan')
            library('infinispan_jboss_marshalling', 'org.infinispan', 'infinispan-jboss-marshalling').versionRef('infinispan')
            library('jackson_annotations', 'com.fasterxml.jackson.core', 'jackson-annotations').versionRef('jacksonCore')
            library('jackson_core', 'com.fasterxml.jackson.core', 'jackson-core').versionRef('jacksonCore')
            library('jackson_databind', 'com.fasterxml.jackson.core', 'jackson-databind').versionRef('jacksonDatabind')
            library('jackson_dataformat_yaml', 'com.fasterxml.jackson.dataformat', 'jackson-dataformat-yaml').versionRef('jacksonDataformatYaml')
            library('janino', 'org.codehaus.janino', 'janino').versionRef('janino')
            library('jakarta_validation', 'jakarta.validation', 'jakarta.validation-api').versionRef('jakartaValidation')
            library('jakarta_inject', 'jakarta.inject', 'jakarta.inject-api').versionRef('jakartaInject')
            library('jakarta_servlet_api', 'jakarta.servlet', 'jakarta.servlet-api').versionRef('jakartaServlet')
            library('jaxbApi', 'jakarta.xml.bind', 'jakarta.xml.bind-api').versionRef('jaxbApi')
            library('jaxbImpl', 'com.sun.xml.bind', 'jaxb-impl').versionRef('jaxbImpl')
            library('jboss_logging', 'org.jboss.logging', 'jboss-logging').versionRef('jbossLogging') // to define minimum version and avoid duplicity libraries in the classpath
            library('jetty_client', 'org.eclipse.jetty', 'jetty-client').versionRef('jettyWebSocketClient')
            library('jetty_http', 'org.eclipse.jetty', 'jetty-http').versionRef('jettyWebSocketClient')
            library('jetty_io', 'org.eclipse.jetty', 'jetty-io').versionRef('jettyWebSocketClient')
            library('jetty_util', 'org.eclipse.jetty', 'jetty-util').versionRef('jettyWebSocketClient')
            library('jetty_websocket_api', 'org.eclipse.jetty.websocket', 'websocket-api').versionRef('jettyWebSocketClient')
            library('jetty_websocket_client', 'org.eclipse.jetty.websocket', 'websocket-client').versionRef('jettyWebSocketClient')
            library('jetty_websocket_common', 'org.eclipse.jetty.websocket', 'websocket-common').versionRef('jettyWebSocketClient')
            library('jettison', 'org.codehaus.jettison', 'jettison').versionRef('jettison')
            library('joda_time', 'joda-time', 'joda-time').versionRef('jodaTime') // to define minimum version and avoid duplicity libraries in the classpath
            library('json_smart', 'net.minidev', 'json-smart').versionRef('jsonSmart')
            library('jjwt', 'io.jsonwebtoken', 'jjwt-api').versionRef('jjwt')
            library('jjwt_impl', 'io.jsonwebtoken', 'jjwt-impl').versionRef('jjwt')
            library('jjwt_jackson', 'io.jsonwebtoken', 'jjwt-jackson').versionRef('jjwt')
            library('json_path', 'com.jayway.jsonpath', 'json-path').versionRef('jsonPath')
            library('junit_jupiter', 'org.junit.jupiter', 'junit-jupiter').versionRef('junitJupiter')
            library('junit_platform_launcher', 'org.junit.platform', 'junit-platform-launcher').versionRef('junitPlatform')
            library('junit_platform_commons', 'org.junit.platform', 'junit-platform-commons').versionRef('junitPlatform')
            library('junit_platform_engine', 'org.junit.platform', 'junit-platform-engine').versionRef('junitPlatform')
            library('lettuce', 'io.lettuce', 'lettuce-core').versionRef('lettuce')
            library('log4j_api', 'org.apache.logging.log4j', 'log4j-api').versionRef('log4j')
            library('log4j_to_slf4j', 'org.apache.logging.log4j', 'log4j-to-slf4j').versionRef('log4j')
            library('lombok', 'org.projectlombok', 'lombok').versionRef('lombok')
            library('netty_bom', 'io.netty', 'netty-bom').versionRef('netty')
            library('netty_reactor_http', 'io.projectreactor.netty', 'reactor-netty-http').versionRef('nettyReactor')
            library('nimbus_jose_jwt', 'com.nimbusds', 'nimbus-jose-jwt').versionRef('nimbusJoseJwt')
            library('openapidiff', 'org.openapitools.openapidiff', 'openapi-diff-core').versionRef('openApiDiff')
            library('picocli', 'info.picocli', 'picocli').versionRef('picocli')
            library('picocli_codegen', 'info.picocli', 'picocli-codegen').versionRef('picocli')
            library('reactor', 'io.projectreactor', 'reactor-core').versionRef('reactor')
            library('reactor_test', 'io.projectreactor', 'reactor-test').versionRef('reactor')
            library('rest_assured', 'io.rest-assured', 'rest-assured').versionRef('restAssured')
            library('rest_assured_json_path', 'io.rest-assured', 'json-path').versionRef('restAssured')
            library('rest_assured_xml_path', 'io.rest-assured', 'xml-path').versionRef('restAssured')
            library('rest_assured_web_test_client', 'io.rest-assured', 'spring-web-test-client').versionRef('restAssured')
            library('rhino', 'org.mozilla', 'rhino').versionRef('rhino') // Added to force minimum transitive version
            library('spring_test', 'org.springframework', 'spring-test').versionRef('springFramework')
            library('spring_doc', 'org.springdoc', 'springdoc-openapi-starter-webmvc-ui').versionRef('springDoc')
            library('spring_doc_webflux', 'org.springdoc', 'springdoc-openapi-starter-webflux-api').versionRef('springDoc')
            library('spring_mock_mvc', 'io.rest-assured', 'spring-mock-mvc').versionRef('restAssured')
            library('swagger2_parser', 'io.swagger', 'swagger-parser').versionRef('swagger2Parser')
            library('swagger3_parser', 'io.swagger.parser.v3', 'swagger-parser-v3').versionRef('swagger3Parser')
            library('swagger_inflector', 'io.swagger', 'swagger-inflector').versionRef('swaggerInflector')
            library('thymeleaf_spring5', 'org.thymeleaf', 'thymeleaf-spring5').versionRef('thymeleaf')
            library('thymeleaf', 'org.thymeleaf', 'thymeleaf').versionRef('thymeleaf')
            library('xstream', 'com.thoughtworks.xstream', 'xstream').versionRef('xstream')
            library('woodstox_core', 'com.fasterxml.woodstox', 'woodstox-core').versionRef('woodstoxCore')
            library('spring_boot_starter_graphql', 'org.springframework.boot', 'spring-boot-starter-graphql').versionRef('springBootGraphQl')

            // Sample apps only
            library('jersey_client4', 'com.sun.jersey.contribs', 'jersey-apache-client4').versionRef('jerseySun')
            library('jersey_client', 'com.sun.jersey', 'jersey-client').versionRef('jerseySun')

            library('spring_boot_gradle_plugin', 'org.springframework.boot', 'spring-boot-gradle-plugin').versionRef('springBoot')
            library('gradle_git_properties', 'com.gorylenko.gradle-git-properties', 'gradle-git-properties').versionRef('gradleGitProperties')
            library('jgit', 'org.eclipse.jgit', 'org.eclipse.jgit').versionRef('jgit')
            library('gradle_sonar_plugin', 'org.sonarsource.scanner.gradle', 'sonarqube-gradle-plugin').versionRef('sonarGradlePlugin')
            library('gradle_release', 'net.researchgate', 'gradle-release').versionRef('gradleRelease')
            library('gradle_licencer', 'gradle.plugin.org.cadixdev.gradle', 'licenser').versionRef('gradleLicencer')
            library('gradle_jib_plugin', 'gradle.plugin.com.google.cloud.tools', 'jib-gradle-plugin').versionRef('gradleJibPlugin')
            library('gradle_test_logger', 'com.adarshr', 'gradle-test-logger-plugin').versionRef('gradleTestLogger')
            library('micronaut_http_client', 'io.micronaut', 'micronaut-http-client').versionRef('micronaut')
            library('micronaut_bom', 'io.micronaut', 'micronaut-core-bom').versionRef('micronaut')
            library('apache_compress', 'org.apache.commons', 'commons-compress').versionRef('commonsCompress')

            plugin('gradle_git_properties', 'com.gorylenko.gradle-git-properties').versionRef('gradleGitProperties')
            plugin('gradle_node', 'com.github.node-gradle.node').versionRef('gradleNode')
            plugin('task_tree', 'com.dorongold.task-tree').versionRef('taskTree')
            plugin('test_logger', 'com.adarshr.test-logger').versionRef('testLogger')
            plugin('micronaut_minimal_application', 'io.micronaut.minimal.application').versionRef('micronautPlugin')
            plugin('micronaut_docker', 'io.micronaut.docker').versionRef('micronautPlugin')

            plugin('shadow', 'com.github.johnrengelman.shadow').versionRef('shadow')

            plugin('micronaut_library', 'io.micronaut.library').versionRef('micronautPlugin')

            // Pure Java dependencies - do not use in Spring unless really necessary
            version('logback', '1.5.8')
            version('mockitoCore', '5.13.0')
            version('mockitoInline', '5.2.0')

            library('logback_classic', 'ch.qos.logback', 'logback-classic').versionRef('logback')
            library('mockito_core', 'org.mockito', 'mockito-core').versionRef('mockitoCore')
            library('mockito_inline', 'org.mockito', 'mockito-inline').versionRef('mockitoInline')


            bundle('infinispan', [ 'infinispan_spring_boot3_starter_embedded', 'infinispan_lock', 'infinispan_jboss_marshalling' ])
            bundle('jaxb', ['jaxbApi', 'jaxbImpl'])

        }

    }

}
