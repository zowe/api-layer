dependencyResolutionManagement {
    versionCatalogs {
        libs {
            // for node projects
            version('projectNode', '18.14.0')
            version('projectNpm', '9.3.1')

            version('springBoot', '2.7.18')
            version('springCloud', '2.2.10.RELEASE')
            version('springCloudCommons', '3.1.9')
            version('springCloudVersion3', '3.1.9')
            version('springCloudNetflix', '3.1.8')
            version('springCloudCB', '2.1.8')
            version('springCloudGateway', '3.1.9')
            version('springSecurity') {
                strictly '[5.8.13,6.0.0['
                prefer '5.8.13'
            }
            version('springFramework') {
                strictly '[5.3.39,6.0.0['
                prefer '5.3.39'
            }
            version('springRetry', '1.3.4')
            version('springWebTestClient', '5.5.0')

            version('aopalliance', '3.0.3') // >=3.0.4 compiled on Java major 55 (J11)
            version('zosUtils', '2.0.5')
            version('archaius', '0.7.12')
            version('awaitility', '4.2.2')
            version('awsJavaSdk', '1.12.774')
            version('bouncyCastle', '1.78.1')
            // forced version in root gradle.build file. Version 3.x requieres Java 11
            version('caffeine', '2.9.3')
            version('commonsCodec', '1.17.1')
            version('commonsConfiguration', '1.10')
            version('commonsLang3', '3.16.0')
            version('commonsLogging', '1.3.4')
            version('commonsText', '1.12.0')
            version('commonsIo', '2.16.1')
            version('commonsFileUpload', '1.5')
            version('ehCache', '3.10.8')
            version('eureka', '1.10.18')
            version('findBugs', '3.0.2')
            version('githubClassgraph', '4.8.177')
            version('gradleGitProperties', '2.2.4') // Used in classpath dependencies
            version('gradleNode', '3.6.0') // Used in classpath dependencies
            version('gson', '2.11.0')
            version('guava', '33.2.1-jre')
            version('hamcrest', '1.3')
            version('httpClient', '4.5.14')
            version('httpCore', '4.4.16')
            version('hystrix', '1.5.18')
            // version 14.x requires Java 11
            version('infinispan', '13.0.22.Final')
            version('jacksonCore', '2.17.2')
            version('jacksonDatabind', '2.17.2')
            version('jacksonDataformatYaml', '2.17.2')
            version('jacksonMapperAsl', '1.9.16-TALEND')
            version('janino', '3.1.12')
            version('javassist', '3.30.2-GA')
            version('javaxAnnotation', '1.3.2')
            version('jakartaInject', '1.0.5')
            version('javaxServletApi', '4.0.1')
            version('jaxbApi', '2.3.1')
            version('jersey', '2.44')
            version('jerseySun', '1.19.4')
            version('jettyWebSocketClient', '9.4.56.v20240826')
            version('jettison', '1.5.4')
            version('jjwt', '0.11.5')
            version('jjwtFull', '0.9.1')
            version('joda', '2.12.7')
            version('jsonPath', '2.9.0')
            version('jsonSmart', '2.5.1')
            version('jsonUnit', '3.4.1')
            version('json', '20240303')
            version('jsr305', '3.0.2')
            version('junitJupiter', '5.10.3')
            version('junitPlatform', '1.10.3')
            version('jquery', '3.7.1')
            version('lettuce', '6.4.0.RELEASE')
            // force version in build.gradle file - compatibility with Slf4j
            version('log4j', '2.23.1')
            version('logback') {
                // 1.3+ versions doesn't contain Slf4J package
                // 1.4+ versions requires JDK 11
                strictly '[1.2.13, 1.3['
                prefer '1.2.13'
            }
            version('lombok', '1.18.34')
            version('mockitoCore') {
                // version 5.x requires Java 11
                strictly '[4.11.0, 5.0.0['
                prefer '4.11.0'
            }
            version('mockitoInline') {
                // version 5.x requires Java 11
                strictly '[4.11.0, 5.0.0['
                prefer '4.11.0'
            }
            version('netflixCommonsUtil', '0.3.0')
            version('netflixServo', '0.13.2')
            version('netty', '4.1.114.Final')
            version('nettyReactor', '1.1.23')
            version('nimbusJoseJwt', '9.40')
            version('openApiDiff', '2.0.1')
            version('ow2asm', '9.7.1')
            version('picocli', '4.7.6')

            // version 2.4 has a breaking change, ie. missing DefaultClientConfigImpl
            version('ribbon', '2.3.0')
            version('reactor') {
                // 3.5.x+: removed method: reactor.core.publisher.Mono.subscriberContext(Lreactor/util/context/Context;)Lreactor/core/publisher/Mono;
                strictly '[3.4.37, 3.5.0['
                prefer '3.4.37'
            }
            version('restAssured', '5.5.0')
            version('rhino', '1.7.15')
            // force version in build.gradle file, version 2.x is not compatible
            version('slf4j', '1.7.36')
            version('snakeyaml', '2.2')
            version('springFox', '2.9.2')
            version('springDoc') {
                // version 1.7+ has a conflict with Jackson databind (displaying of examples)
                strictly '[1.6.15, 1.7.0['
                prefer '1.6.15'
            }
            version('swagger3Core', '2.2.25')
            version('swagger3Parser', '2.1.22')
            version('swaggerCore', '1.6.14')
            version('swaggerInflector', '2.0.12')
            version('swaggerJaxrs2', '2.2.25')
            version('thymeleaf', '3.1.2.RELEASE')
            version('tomcat', '9.0.96')
            version('velocity', '2.4')
            version('woodstoxCore', '6.7.0')
            version('woodstoxStax2', '4.2.2')
            version('xstream') {
                // older versions are vulnerable to CVE-2022-40151, CVE-2022-40152, and CVE-2022-41966
                strictly '[1.4.20,2.0['
                prefer '1.4.20'
            }

            // version 6.x is not compatible with gradleGitProperties and requires Java 11
            version('jgit') {
                strictly '[5.13.2.202306221912-r,6.0.0.0['
                prefer '5.13.2.202306221912-r'
            }
            version('gradleNode', '7.0.2')
            // the next version (4.1.0.3113) requires Java 11
            version('sonarGradlePlugin', '4.0.0.2929')
            // version 3.x contains breaking changes
            version('gradleRelease', '2.8.1')
            version('gradleLicencer', '0.6.1')
            version('gradleJibPlugin', '3.2.1')
            version('taskTree', '2.1.1')
            version('reactorBom', '2023.0')
            version('gradleTestLogger', '4.0.0')
            version('testLogger', '4.0.0')
            // version 4.x is not compatible with Java 8
            version('micronaut', '3.10.4')
            version('micronautPlugin', '3.7.10')
            version('shadow', '8.1.1')
            version('gradleTomcatPlugin', '2.7.0')
            // version 10.x+ requires Java 11
            version('checkstyle', '9.3')
            version('jacoco', '0.8.11')
            version('gradle', '8.4')
            version('assertjCore', '3.26.3')

            library('zowe_zos_utils', 'org.zowe.apiml.sdk', 'zos-utils').versionRef('zosUtils')
            library('spring_boot_configuration_processor', 'org.springframework.boot', 'spring-boot-configuration-processor').versionRef('springBoot')
            library('spring_boot_dependencies', 'org.springframework.boot', 'spring-boot-dependencies').versionRef('springBoot')
            library('spring_boot_starter', 'org.springframework.boot', 'spring-boot-starter').versionRef('springBoot')
            library('spring_boot_starter_actuator', 'org.springframework.boot', 'spring-boot-starter-actuator').versionRef('springBoot')
            library('spring_boot_starter_security', 'org.springframework.boot', 'spring-boot-starter-security').versionRef('springBoot')
            library('spring_boot_starter_validation', 'org.springframework.boot', 'spring-boot-starter-validation').versionRef('springBoot')
            library('spring_boot_starter_web', 'org.springframework.boot', 'spring-boot-starter-web').versionRef('springBoot')
            library('spring_boot_starter_websocket', 'org.springframework.boot', 'spring-boot-starter-websocket').versionRef('springBoot')
            library('spring_boot_starter_test', 'org.springframework.boot', 'spring-boot-starter-test').versionRef('springBoot')
            library('spring_boot_starter_aop', 'org.springframework.boot', 'spring-boot-starter-aop').versionRef('springBoot')
            library('spring_boot_starter_thymeleaf', 'org.springframework.boot', 'spring-boot-starter-thymeleaf').versionRef('springBoot')
            library('spring_boot_starter_cache', 'org.springframework.boot', 'spring-boot-starter-cache').versionRef('springBoot')
            library('spring_boot_starter_webflux', 'org.springframework.boot', 'spring-boot-starter-webflux').versionRef('springBoot')
            library('spring_boot_starter_oauth2_client', 'org.springframework.boot', 'spring-boot-starter-oauth2-client').versionRef('springBoot')

            library('spring_cloud_hystrix_dashboard', 'org.springframework.cloud', 'spring-cloud-starter-netflix-hystrix-dashboard').versionRef('springCloud')
            library('spring_cloud_loadbalancer', 'org.springframework.cloud', 'spring-cloud-starter-loadbalancer').versionRef('springCloudVersion3')
            library('spring_cloud_starter', 'org.springframework.cloud', 'spring-cloud-starter').versionRef('springCloudVersion3')
            library('spring_cloud_starter_bootstrap', 'org.springframework.cloud', 'spring-cloud-starter-bootstrap').versionRef('springCloudVersion3')
            library('spring_cloud_starter_zuul', 'org.springframework.cloud', 'spring-cloud-starter-netflix-zuul').versionRef('springCloud')
            library('spring_cloud_starter_eureka', 'org.springframework.cloud', 'spring-cloud-starter-netflix-eureka-client').versionRef('springCloudNetflix')
            library('spring_cloud_starter_eureka_server', 'org.springframework.cloud', 'spring-cloud-starter-netflix-eureka-server').versionRef('springCloudNetflix')
            library('spring_cloud_starter_ribbon', 'org.springframework.cloud', 'spring-cloud-starter-netflix-ribbon').versionRef('springCloud')
            library('spring_cloud_starter_hystrix', 'org.springframework.cloud', 'spring-cloud-starter-netflix-hystrix').versionRef('springCloud')
            library('spring_cloud_starter_turbine', 'org.springframework.cloud', 'spring-cloud-starter-netflix-turbine').versionRef('springCloud')
            library('spring_cloud_starter_gateway', 'org.springframework.cloud', 'spring-cloud-starter-gateway').versionRef('springCloudGateway')
            library('spring_cloud_commons', 'org.springframework.cloud', 'spring-cloud-commons').versionRef('springCloudCommons')
            library('spring_cloud_circuit_breaker', 'org.springframework.cloud', 'spring-cloud-starter-circuitbreaker-reactor-resilience4j').versionRef('springCloudCB')

            library('spring_security_config', 'org.springframework.security', 'spring-security-config').versionRef('springSecurity')
            library('spring_security_core', 'org.springframework.security', 'spring-security-core').versionRef('springSecurity')
            library('spring_security_crypto', 'org.springframework.security', 'spring-security-crypto').versionRef('springSecurity')
            library('spring_security_web', 'org.springframework.security', 'spring-security-web').versionRef('springSecurity')
            library('spring_security_oauth_client', 'org.springframework.security', 'spring-security-oauth2-client').versionRef('springSecurity')
            library('spring_security_oauth_core', 'org.springframework.security', 'spring-security-oauth2-core').versionRef('springSecurity')
            library('spring_security_oauth_jose', 'org.springframework.security', 'spring-security-oauth2-jose').versionRef('springSecurity')

            library('spring_retry', 'org.springframework.retry', 'spring-retry').versionRef('springRetry')
            library('spring_web_test_client', 'io.rest-assured', 'spring-web-test-client').versionRef('springWebTestClient')
            library('spring_bom', 'org.springframework', 'spring-framework-bom').versionRef('springFramework')
            library('spring_aop', 'org.springframework', 'spring-aop').versionRef('springFramework')
            library('spring_beans', 'org.springframework', 'spring-beans').versionRef('springFramework')
            library('spring_context', 'org.springframework', 'spring-context').versionRef('springFramework')
            library('spring_context_support', 'org.springframework', 'spring-context-support').versionRef('springFramework')
            library('spring_core', 'org.springframework', 'spring-core').versionRef('springFramework')
            library('spring_expression', 'org.springframework', 'spring-expression').versionRef('springFramework')
            library('spring_messaging', 'org.springframework', 'spring-messaging').versionRef('springFramework')
            library('spring_web', 'org.springframework', 'spring-web').versionRef('springFramework')
            library('spring_webmvc', 'org.springframework', 'spring-webmvc').versionRef('springFramework')
            library('spring_webflux', 'org.springframework', 'spring-webflux').versionRef('springFramework')
            library('spring_websocket', 'org.springframework', 'spring-websocket').versionRef('springFramework')

            library('aopalliance', 'org.glassfish.hk2.external', 'aopalliance-repackaged').versionRef('aopalliance')
            library('archaius', 'com.netflix.archaius', 'archaius-core').versionRef('archaius')
            library('amazon_aws_autoscaling', 'com.amazonaws', 'aws-java-sdk-autoscaling').versionRef('awsJavaSdk')
            library('amazon_aws_core', 'com.amazonaws', 'aws-java-sdk-core').versionRef('awsJavaSdk')
            library('amazon_aws_ec2', 'com.amazonaws', 'aws-java-sdk-ec2').versionRef('awsJavaSdk')
            library('amazon_aws_route', 'com.amazonaws', 'aws-java-sdk-route53').versionRef('awsJavaSdk')
            library('amazon_aws_sts', 'com.amazonaws', 'aws-java-sdk-sts').versionRef('awsJavaSdk')
            library('apache_commons_codec', 'commons-codec', 'commons-codec').versionRef('commonsCodec')
            library('apache_commons_configuration', 'commons-configuration', 'commons-configuration').versionRef('commonsConfiguration')
            library('apache_commons_lang3', 'org.apache.commons', 'commons-lang3').versionRef('commonsLang3')
            library('apache_commons_logging', 'commons-logging', 'commons-logging').versionRef('commonsLogging')
            library('apache_commons_text', 'org.apache.commons', 'commons-text').versionRef('commonsText')
            library('commons_fileupload', 'commons-fileupload', 'commons-fileupload').versionRef('commonsFileUpload')

            library('apache_velocity', 'org.apache.velocity', 'velocity-engine-core').versionRef('velocity')
            library('awaitility', 'org.awaitility', 'awaitility').versionRef('awaitility')
            library('bcprov', 'org.bouncycastle', 'bcprov-jdk18on').versionRef('bouncyCastle')
            library('bcpkix', 'org.bouncycastle', 'bcpkix-jdk18on').versionRef('bouncyCastle')
            library('caffeine', 'com.github.ben-manes.caffeine', 'caffeine').versionRef('caffeine')
            library('commons_io', 'commons-io', 'commons-io').versionRef('commonsIo')
            library('eh_cache', 'org.ehcache', 'ehcache').versionRef('ehCache')
            library('eureka_client', 'com.netflix.eureka', 'eureka-client').versionRef('eureka')
            library('eureka_core', 'com.netflix.eureka', 'eureka-core').versionRef('eureka')
            library('findbugs', 'com.google.code.findbugs', 'jsr305').versionRef('findBugs')
            library('gson', 'com.google.code.gson', 'gson').versionRef('gson')
            library('guava', 'com.google.guava', 'guava').versionRef('guava')
            library('hamcrest', 'org.hamcrest', 'hamcrest-all').versionRef('hamcrest')
            library('http_client', 'org.apache.httpcomponents', 'httpclient').versionRef('httpClient')
            library('http_core', 'org.apache.httpcomponents', 'httpcore').versionRef('httpCore')
            library('hystrix_core', 'com.netflix.hystrix', 'hystrix-core').versionRef('hystrix')
            library('infinispan_core', 'org.infinispan', 'infinispan-core').versionRef('infinispan')
            library('infinispan_lock', 'org.infinispan', 'infinispan-clustered-lock').versionRef('infinispan')
            library('infinispan_jboss_marshalling', 'org.infinispan', 'infinispan-jboss-marshalling').versionRef('infinispan')
            library('jackson_annotations', 'com.fasterxml.jackson.core', 'jackson-annotations').versionRef('jacksonCore')
            library('jackson_core', 'com.fasterxml.jackson.core', 'jackson-core').versionRef('jacksonCore')
            library('jackson_databind', 'com.fasterxml.jackson.core', 'jackson-databind').versionRef('jacksonDatabind')
            library('jackson_dataformat_yaml', 'com.fasterxml.jackson.dataformat', 'jackson-dataformat-yaml').versionRef('jacksonDataformatYaml')
            library('jackson_mapper_asl', 'org.codehaus.jackson', 'jackson-mapper-asl').versionRef('jacksonMapperAsl')
            library('janino', 'org.codehaus.janino', 'janino').versionRef('janino')
            library('javassist', 'org.javassist', 'javassist').versionRef('javassist')
            library('javax_annotation', 'javax.annotation', 'javax.annotation-api').versionRef('javaxAnnotation')
            library('javax_inject', 'javax.inject', 'javax.inject').version('1')
            library('jakarta_inject', 'jakarta.inject', 'jakarta.inject-api').versionRef('jakartaInject')
            library('javax_servlet_api', 'javax.servlet', 'javax.servlet-api').versionRef('javaxServletApi')
            library('jaxb_api', 'javax.xml.bind', 'jaxb-api').versionRef('jaxbApi')
            library('jetty_client', 'org.eclipse.jetty', 'jetty-client').versionRef('jettyWebSocketClient')
            library('jetty_http', 'org.eclipse.jetty', 'jetty-http').versionRef('jettyWebSocketClient')
            library('jetty_io', 'org.eclipse.jetty', 'jetty-io').versionRef('jettyWebSocketClient')
            library('jetty_util', 'org.eclipse.jetty', 'jetty-util').versionRef('jettyWebSocketClient')
            library('jetty_websocket_api', 'org.eclipse.jetty.websocket', 'websocket-api').versionRef('jettyWebSocketClient')
            library('jetty_websocket_client', 'org.eclipse.jetty.websocket', 'websocket-client').versionRef('jettyWebSocketClient')
            library('jetty_websocket_common', 'org.eclipse.jetty.websocket', 'websocket-common').versionRef('jettyWebSocketClient')
            library('jettison', 'org.codehaus.jettison', 'jettison').versionRef('jettison')
            library('json_smart', 'net.minidev', 'json-smart').versionRef('jsonSmart')
            library('jjwt', 'io.jsonwebtoken', 'jjwt-api').versionRef('jjwt')
            library('jjwt_full', 'io.jsonwebtoken', 'jjwt').versionRef('jjwtFull')
            library('jjwt_impl', 'io.jsonwebtoken', 'jjwt-impl').versionRef('jjwt')
            library('jjwt_jackson', 'io.jsonwebtoken', 'jjwt-jackson').versionRef('jjwt')
            library('joda', 'joda-time', 'joda-time').versionRef('joda')
            library('json', 'org.json', 'json').versionRef('json')
            library('json_path', 'com.jayway.jsonpath', 'json-path').versionRef('jsonPath')
            library('json_unit', 'net.javacrumbs.json-unit', 'json-unit').versionRef('jsonUnit')
            library('json_unit_fluent', 'net.javacrumbs.json-unit', 'json-unit-fluent').versionRef('jsonUnit')
            library('jsr305', 'com.google.code.findbugs', 'jsr305').versionRef('jsr305')
            library('junitJupiter', 'org.junit.jupiter', 'junit-jupiter').versionRef('junitJupiter')
            library('junit_platform_launcher', 'org.junit.platform', 'junit-platform-launcher').versionRef('junitPlatform')
            library('junit_platform_commons', 'org.junit.platform', 'junit-platform-commons').versionRef('junitPlatform')
            library('junit_platform_engine', 'org.junit.platform', 'junit-platform-engine').versionRef('junitPlatform')
            library('jquery', 'org.webjars', 'jquery').versionRef('jquery')
            library('lettuce', 'io.lettuce', 'lettuce-core').versionRef('lettuce')
            library('log4j_api', 'org.apache.logging.log4j', 'log4j-api').versionRef('log4j')
            library('log4j_to_slf4j', 'org.apache.logging.log4j', 'log4j-to-slf4j').versionRef('log4j')
            library('logback_classic', 'ch.qos.logback', 'logback-classic').versionRef('logback')
            library('logback_core', 'ch.qos.logback', 'logback-core').versionRef('logback')
            library('lombok', 'org.projectlombok', 'lombok').versionRef('lombok')
            library('mockito_core', 'org.mockito', 'mockito-core').versionRef('mockitoCore')
            library('mockito_jupiter', 'org.mockito', 'mockito-junit-jupiter').versionRef('mockitoCore')
            library('mockito_inline', 'org.mockito', 'mockito-inline').versionRef('mockitoInline')
            library('netflix_commons_util', 'com.netflix.netflix-commons', 'netflix-commons-util').versionRef('netflixCommonsUtil')
            library('netflix_servo', 'com.netflix.servo', 'servo-core').versionRef('netflixServo')
            library('netty', 'io.netty', 'netty-all').versionRef('netty')
            library('netty_bom', 'io.netty', 'netty-bom').versionRef('netty')
            library('netty_buffer', 'io.netty', 'netty-buffer').versionRef('netty')
            library('netty_codec', 'io.netty', 'netty-codec').versionRef('netty')
            library('netty_codec_dns', 'io.netty', 'netty-codec-dns').versionRef('netty')
            library('netty_codec_haproxy', 'io.netty', 'netty-codec-haproxy').versionRef('netty')
            library('netty_codec_http', 'io.netty', 'netty-codec-http').versionRef('netty')
            library('netty_codec_http2', 'io.netty', 'netty-codec-http2').versionRef('netty')
            library('netty_codec_memcache', 'io.netty', 'netty-codec-memcache').versionRef('netty')
            library('netty_codec_mqtt', 'io.netty', 'netty-codec-mqtt').versionRef('netty')
            library('netty_codec_redis', 'io.netty', 'netty-codec-redis').versionRef('netty')
            library('netty_codec_socks', 'io.netty', 'netty-codec-socks').versionRef('netty')
            library('netty_codec_smtp', 'io.netty', 'netty-codec-smtp').versionRef('netty')
            library('netty_codec_stomp', 'io.netty', 'netty-codec-stomp').versionRef('netty')
            library('netty_codec_xml', 'io.netty', 'netty-codec-xml').versionRef('netty')
            library('netty_common', 'io.netty', 'netty-common').versionRef('netty')
            library('netty_handler', 'io.netty', 'netty-handler').versionRef('netty')
            library('netty_handler_proxy', 'io.netty', 'netty-handler-proxy').versionRef('netty')
            library('netty_reactor_core', 'io.projectreactor.netty', 'reactor-netty-core').versionRef('nettyReactor')
            library('netty_reactor_http', 'io.projectreactor.netty', 'reactor-netty-http').versionRef('nettyReactor')
            library('netty_resolver', 'io.netty', 'netty-resolver').versionRef('netty')
            library('netty_resolver_dns', 'io.netty', 'netty-resolver-dns').versionRef('netty')
            library('netty_resolver_dns_native_macos', 'io.netty', 'netty-resolver-dns-native-macos').versionRef('netty')
            library('netty_transport', 'io.netty', 'netty-transport').versionRef('netty')
            library('netty_transport_native_epoll', 'io.netty', 'netty-transport-native-epoll').versionRef('netty')
            library('netty_transport_native_kqueue', 'io.netty', 'netty-transport-native-kqueue').versionRef('netty')
            library('netty_transport_native_unix_common', 'io.netty', 'netty-transport-native-unix-common').versionRef('netty')
            library('netty_transport_rxtx', 'io.netty', 'netty-transport-rxtx').versionRef('netty')
            library('netty_transport_sctp', 'io.netty', 'netty-transport-sctp').versionRef('netty')
            library('netty_transport_udt', 'io.netty', 'netty-transport-udt').versionRef('netty')
            library('nimbusJoseJwt', 'com.nimbusds', 'nimbus-jose-jwt').versionRef('nimbusJoseJwt')
            library('openapidiff', 'org.openapitools.openapidiff', 'openapi-diff-core').versionRef('openApiDiff')
            library('ow2asm', 'org.ow2.asm', 'asm').versionRef('ow2asm')
            library('picocli', 'info.picocli', 'picocli').versionRef('picocli')
            library('picocliCodegen', 'info.picocli', 'picocli-codegen').versionRef('picocli')
            library('reactor', 'io.projectreactor', 'reactor-core').versionRef('reactor')
            library('reactorTest', 'io.projectreactor', 'reactor-test').versionRef('reactor')
            library('rhino', 'org.mozilla', 'rhino').versionRef('rhino')
            library('rest_assured', 'io.rest-assured', 'rest-assured').versionRef('restAssured')
            library('rest_assured_json_path', 'io.rest-assured', 'json-path').versionRef('restAssured')
            library('rest_assured_xml_path', 'io.rest-assured', 'xml-path').versionRef('restAssured')
            library('ribbon-eureka', 'com.netflix.ribbon', 'ribbon-eureka').versionRef('ribbon')
            library('slf4j_api', 'org.slf4j', 'slf4j-api').versionRef('slf4j')
            library('snakeyaml', 'org.yaml', 'snakeyaml').versionRef('snakeyaml')
            library('spring4Mvc', 'org.springframework', 'spring-webmvc').versionRef('springFramework')
            library('spring4Test', 'org.springframework', 'spring-test').versionRef('springFramework')
            library('springFox', 'io.springfox', 'springfox-swagger2').versionRef('springFox')
            library('spring_doc', 'org.springdoc', 'springdoc-openapi-ui').versionRef('springDoc')
            library('spring_mock_mvc', 'io.rest-assured', 'spring-mock-mvc').versionRef('restAssured')
            library('swagger_core', 'io.swagger', 'swagger-core').versionRef('swaggerCore')
            library('swagger3_core', 'io.swagger.core.v3', 'swagger-core').versionRef('swagger3Core')
            library('swagger3_parser', 'io.swagger.parser.v3', 'swagger-parser-v3').versionRef('swagger3Parser')
            library('swagger_inflector', 'io.swagger', 'swagger-inflector').versionRef('swaggerInflector')
            library('swagger_models', 'io.swagger', 'swagger-models').versionRef('swaggerCore')
            library('thymeleafSpring', 'org.thymeleaf', 'thymeleaf-spring5').versionRef('thymeleaf')
            library('thymeleaf', 'org.thymeleaf', 'thymeleaf').versionRef('thymeleaf')
            library('tomcat_annotations_api', 'org.apache.tomcat', 'tomcat-annotations-api').versionRef('tomcat')
            library('tomcat_coyote', 'org.apache.tomcat', 'tomcat-coyote').versionRef('tomcat')
            library('tomcat_embed_core', 'org.apache.tomcat.embed', 'tomcat-embed-core').versionRef('tomcat')
            library('tomcat_embed_el', 'org.apache.tomcat.embed', 'tomcat-embed-el').versionRef('tomcat')
            library('tomcat_embed_jasper', 'org.apache.tomcat.embed', 'tomcat-embed-jasper').versionRef('tomcat')
            library('tomcat_embed_logging-juli', 'org.apache.tomcat.embed', 'tomcat-embed-logging-juli').versionRef('tomcat')
            library('tomcat_embed_websocket', 'org.apache.tomcat.embed', 'tomcat-embed-websocket').versionRef('tomcat')
            library('woodstox_core', 'com.fasterxml.woodstox', 'woodstox-core').versionRef('woodstoxCore')
            library('woodstox_stax2', 'org.codehaus.woodstox', 'stax2-api').versionRef('woodstoxStax2')
            library('xstream', 'com.thoughtworks.xstream', 'xstream').versionRef('xstream')
            library('assertj_core','org.assertj', 'assertj-core').versionRef('assertjCore')

            // Sample apps only
            library('jersey_container_servlet_core', 'org.glassfish.jersey.containers', 'jersey-container-servlet-core').versionRef('jersey')
            library('jersey_hk2', 'org.glassfish.jersey.inject', 'jersey-hk2').versionRef('jersey')
            library('jersey_media_json_jackson', 'org.glassfish.jersey.media', 'jersey-media-json-jackson').versionRef('jersey')
            library('jersey_server', 'org.glassfish.jersey.core', 'jersey-server').versionRef('jersey')
            library('jersey_test_provider_jdk_http', 'org.glassfish.jersey.test-framework.providers', 'jersey-test-framework-provider-jdk-http').versionRef('jersey')

            library('jersey_client4', 'com.sun.jersey.contribs', 'jersey-apache-client4').versionRef('jerseySun')
            library('jersey_client', 'com.sun.jersey', 'jersey-client').versionRef('jerseySun')
            library('jersey_core', 'com.sun.jersey', 'jersey-core').versionRef('jerseySun')

            library('swagger_jaxrs2', 'io.swagger.core.v3', 'swagger-jaxrs2').versionRef('swaggerJaxrs2')

            library('spring_boot_gradle_plugin', 'org.springframework.boot', 'spring-boot-gradle-plugin').versionRef('springBoot')
            library('gradle_git_properties', 'gradle.plugin.com.gorylenko.gradle-git-properties', 'gradle-git-properties').versionRef('gradleGitProperties')
            library('jgit', 'org.eclipse.jgit', 'org.eclipse.jgit').versionRef('jgit')
            library('github_classpath', 'io.github.classgraph', 'classgraph').versionRef('githubClassgraph')
            library('gradle_node_plugin', 'com.github.node-gradle', 'gradle-node-plugin').versionRef('gradleNode')
            library('gradle_sonar_plugin', 'org.sonarsource.scanner.gradle', 'sonarqube-gradle-plugin').versionRef('sonarGradlePlugin')
            library('gradle_release', 'net.researchgate', 'gradle-release').versionRef('gradleRelease')
            library('gradle_licencer', 'gradle.plugin.org.cadixdev.gradle', 'licenser').versionRef('gradleLicencer')
            library('gradle_jib_plugin', 'gradle.plugin.com.google.cloud.tools', 'jib-gradle-plugin').versionRef('gradleJibPlugin')
            library('gradle_test_logger', 'com.adarshr', 'gradle-test-logger-plugin').versionRef('gradleTestLogger')
            library('gradle_tomcat_plugin', 'com.bmuschko', 'gradle-tomcat-plugin').versionRef('gradleTomcatPlugin')
            library('micronaut_http_client', 'io.micronaut', 'micronaut-http-client').versionRef('micronaut')

            plugin('gradle_git_properties', 'com.gorylenko.gradle-git-properties').versionRef('gradleGitProperties')
            plugin('gradle_node', 'com.github.node-gradle.node').versionRef('gradleNode')
            plugin('task_tree', 'com.dorongold.task-tree').versionRef('taskTree')
            plugin('test_logger', 'com.adarshr.test-logger').versionRef('testLogger')
            plugin('micronaut_application', 'io.micronaut.application').versionRef('micronautPlugin')
            plugin('micronaut_minimal_application', 'io.micronaut.minimal.application').versionRef('micronautPlugin')
            plugin('micronaut_docker', 'io.micronaut.docker').versionRef('micronautPlugin')
            plugin('shadow', 'com.github.johnrengelman.shadow').versionRef('shadow')
            plugin('gradle_tomcat', 'com.bmuschko.tomcat').versionRef('gradleTomcatPlugin')
            plugin('micronaut_library', 'io.micronaut.library').versionRef('micronautPlugin')
        }
    }
}
