buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.gradle.git.properties
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply from: "$projectDir/gradle/lite.gradle"
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6304
def debugPort = 5124
def componentName = "api-catalog-services"
if (project.hasProperty('zowe.jib.image.suffix')) { // Prefix for the component name (for the standalone catalog container)
    componentName += '-' + project.getProperty('zowe.jib.image.suffix')
}
if (project.hasProperty('zowe.jib.image.javaAgentPort')) {
    javaAgentPort = project.getProperty('zowe.jib.image.javaAgentPort')
}
if (project.hasProperty('zowe.jib.image.debugPort')) {
    debugPort = project.getProperty('zowe.jib.image.debugPort')
}

setJib(componentName, javaAgentPort, debugPort)

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by             : System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number         : System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine        : InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    api project(':apiml-tomcat-common')
    api project(':apiml-security-common')
    api project(':security-service-client-spring')

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    annotationProcessor libs.spring.boot.configuration.processor

    implementation libs.swagger.models
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.websocket
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.configuration.processor
    implementation libs.spring.cloud.commons
    implementation libs.spring.cloud.starter.bootstrap
    implementation libs.spring.cloud.starter.eureka
    implementation libs.spring.cloud.starter.hystrix
    implementation libs.spring.retry
    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.apache.commons.lang3
    implementation libs.spring.boot.starter.thymeleaf
    implementation libs.apache.velocity
    implementation libs.openapidiff
    implementation libs.http.client
    implementation libs.jetty.client
    implementation libs.jetty.http
    implementation libs.jetty.io
    implementation libs.jetty.util
    implementation libs.jetty.websocket.api
    implementation libs.jetty.websocket.client
    implementation libs.jetty.websocket.common
    implementation libs.spring.security.config
    implementation libs.spring.security.core
    implementation libs.spring.security.crypto
    implementation libs.spring.security.web
    implementation libs.tomcat.annotations.api
    implementation libs.tomcat.embed.core
    implementation libs.tomcat.embed.el
    implementation libs.tomcat.embed.websocket
    implementation libs.xstream
    implementation libs.commons.io
    implementation libs.guava
    implementation libs.spring.aop
    implementation libs.spring.beans
    implementation libs.spring.context
    implementation libs.spring.context.support
    implementation libs.spring.core
    implementation libs.spring.expression
    implementation libs.spring.messaging
    implementation libs.spring.web
    implementation libs.spring.webmvc
    implementation libs.spring.webflux
    implementation libs.spring.websocket
    implementation libs.spring.doc
    implementation libs.thymeleaf
    implementation libs.thymeleafSpring
    implementation libs.logback.core
    implementation libs.logback.classic
    implementation libs.swagger3.parser
    implementation libs.swagger.inflector
    implementation libs.commons.fileupload

    testImplementation libs.rest.assured
    testImplementation libs.spring.mock.mvc

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testImplementation libs.spring.boot.starter.test
    testImplementation libs.json.smart
}

bootJar {
    archiveFileName = "api-catalog-services.jar"
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }
    archiveClassifier = "application"
}

jar {
    enabled true
    archiveClassifier = ""
}

def uiModule = "${project(':api-catalog-ui').projectDir}"

processResources {
    dependsOn "copyUi"
}

task copyUi(type: Copy) {
    group = "ui"

    dependsOn ":api-catalog-ui:build"

    inputs.dir(uiModule + '/frontend/build')
    outputs.dir('src/main/resources/static')

    from uiModule + '/frontend/build'
    into 'src/main/resources/static'
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }

    debugOptions {
        port = 5014
        suspend = false
        server = true
    }

    workingDir = project.rootDir

    systemProperties = System.properties
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'api-catalog-fat-jar'

            artifact bootJar
        }
    }
}
