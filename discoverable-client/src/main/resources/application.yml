logging:
    level:
        ROOT: INFO
        org.zowe.apiml: INFO
        org.springframework: WARN
        org.springdoc: WARN
        org.apache.catalina: WARN
        com.netflix: WARN
        com.netflix.discovery: ERROR
        com.netflix.config: ERROR
        com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient: OFF
        com.netflix.discovery.DiscoveryClient: OFF
        org.springframework.boot.web.embedded.tomcat.TomcatWebServer: INFO
        org.apache.http.conn.ssl.DefaultHostnameVerifier: DEBUG #logs only SSLException

spring:
    cloud:
        compatibilityVerifier:
            enabled: false # Should be removed when upgrade to Spring Cloud 3.x
    application:
        name: ${apiml.service.serviceId}
    mvc:
        throw-exception-if-no-handler-found: true
    output:
        ansi:
            enabled: detect
    main:
        allow-circular-references: true
    profiles.group:
        dev: diag

eureka:
    client:
        initialInstanceInfoReplicationIntervalSeconds: 1
        registryFetchIntervalSeconds: 1
apiml:
    enabled: true
    service:
        preferIpAddress: false

        serviceId: discoverableclient
        title: Service Spring Onboarding Enabler sample application API
        description:  Sample API services to demonstrate Spring Onboarding Enabler

        discoveryServiceUrls: https://localhost:10011/eureka/

        scheme: https

        hostname: localhost
        port: 10012
        baseUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}
        contextPath: /${apiml.service.serviceId}
        authentication:
            scheme: x509
            headers: X-Certificate-Public,X-Certificate-DistinguishedName,X-Certificate-CommonName
        homePageRelativeUrl: ${apiml.service.contextPath}
        statusPageRelativeUrl: ${apiml.service.contextPath}/application/info
        healthCheckRelativeUrl: ${apiml.service.contextPath}/application/health

        routes:
            -   gateway-url: "/ui/v1"
                service-url: ${apiml.service.contextPath}
            -   gateway-url: "/api/v1"
                service-url: ${apiml.service.contextPath}/api/v1
            -   gateway-url: "/api/v2"
                service-url: ${apiml.service.contextPath}/api/v2
            -   gateway-url: "/ws/v1"
                service-url: ${apiml.service.contextPath}/ws
            -   gateway-url: "/sse/v1"
                service-url: ${apiml.service.contextPath}/
            -   gateway-url: "/graphql/v1"
                service-url: ${apiml.service.contextPath}/
        apiInfo:
            -   apiId: zowe.apiml.discoverableclient.rest
                version: 1.0.0
                gatewayUrl: api/v1
                swaggerUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/v3/api-docs/apiv1
                documentationUrl: https://www.zowe.org
                defaultApi: true
                codeSnippet:
                    - endpoint: /greeting
                      language: java
                      codeBlock: |
                          String template = "Hello, %s!";
                          String defaultValue = "world";
                          Greeting greeting = new Greeting(new Date(), String.format(template, defaultValue));
                          System.out.println(greeting.getContent());
                    - endpoint: /{yourName}/greeting
                      language: java
                      codeBlock: |
                          String template = "Hello, %s!";
                          String name = "John";
                          Greeting greeting = new Greeting(new Date(), String.format(template, name));
                          System.out.println(greeting.getContent());
            -   apiId: zowe.apiml.discoverableclient.ws
                version: 1.0.0
                gatewayUrl: graphql/v1
                swaggerUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/v3/api-docs/graphv1
                documentationUrl: https://www.zowe.org
            -   apiId: zowe.apiml.discoverableclient.rest
                version: 2.0.0
                gatewayUrl: api/v2
                swaggerUrl: ${apiml.service.scheme}://${apiml.service.hostname}:${apiml.service.port}${apiml.service.contextPath}/v3/api-docs/apiv2
                documentationUrl: https://www.zowe.org
        catalog:
            tile:
                id: cademoapps
                title: Sample API Mediation Layer Applications
                description: Applications which demonstrate how to make a service integrated to the API Mediation Layer ecosystem
                version: 1.0.1
        ssl:
            enabled: true
            verifySslCertificatesOfServices: true
            protocol: ${server.ssl.protocol}
            keyStoreType: ${server.ssl.keyStoreType}
            trustStoreType: ${server.ssl.trustStoreType}

            keyAlias: ${server.ssl.keyAlias}
            keyPassword: ${server.ssl.keyPassword}
            keyStore: ${server.ssl.keyStore}
            keyStorePassword: ${server.ssl.keyStorePassword}
            trustStore: ${server.ssl.trustStore}
            trustStorePassword: ${server.ssl.trustStorePassword}
        customMetadata:
            apiml:
                enableUrlEncodedCharacters: true
                gatewayPort: 10010
                gatewayAuthEndpoint: /gateway/api/v1/auth
                corsEnabled: true
                corsAllowedOrigins: http://localhost:3000
                lb:
                    type: authentication

server:
    error:
        include-message: always

    port: ${apiml.service.port}

    servlet:
        contextPath: /${apiml.service.serviceId}

    ssl:
        enabled: true
        clientAuth: want
        protocol: TLSv1.2
        enabled-protocols: TLSv1.2+TLSv1.3
        ciphers: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384
        keyStoreType: PKCS12
        trustStoreType: PKCS12

        keyAlias: localhost
        keyPassword: password
        keyStore: keystore/localhost/localhost.keystore.p12
        keyStorePassword: password
        trustStore: keystore/localhost/localhost.truststore.p12
        trustStorePassword: password

    compression:
        mime-types: image/png
        enabled: true
        min-response-size: 500

management:
    endpoints:
        migrate-legacy-ids: true
        web:
            base-path: /application
            exposure:
                include: health, info, routes, shutdown
    health:
        defaults:
            enabled: true
    endpoint:
        shutdown:
            enabled: true

---
spring.config.activate.on-profile: diag

management:
    endpoints:
        migrate-legacy-ids: true
        web:
            base-path: /application
            exposure:
                include: "*"
    endpoint:
        shutdown:
            enabled: true

---
spring.config.activate.on-profile: dev

logging:
    level:
        ROOT: INFO
        org.zowe.apiml: DEBUG
        org.springframework: INFO
        org.apache.catalina: INFO
        com.netflix: INFO

logbackServiceName: ZWEADC1

---
spring.config.activate.on-profile: attls

apiml:
    service:
        scheme: http

server:
    ssl:
        enabled: false
