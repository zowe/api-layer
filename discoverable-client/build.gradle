buildscript {
    repositories mavenRepositories
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitPropertiesVersion}")
        classpath ("org.eclipse.jgit:org.eclipse.jgit:5.13.3.202401111512-r") {
            force = true
        }
    }
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def debugPort = 5122
def componentName = "discoverable-client"

setJib(componentName, debugPort)

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additionalProperties = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    api project(':onboarding-enabler-spring')
    api project(':zaas-client')
    implementation (libraries.spring_doc) {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "org.yaml", module: "snakeyaml"
    }
    implementation libraries.jackson_databind
    implementation libraries.spring_boot_starter
    implementation(libraries.spring_boot_starter_actuator) {
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.springframework", module: "spring-core"
    }
    implementation(libraries.spring_boot_starter_web){
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-webmvc"
        exclude group: "org.springframework", module: "spring-context"
        exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-core"
        exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-el"
        exclude group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket"
        exclude group: "org.yaml", module: "snakeyaml"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-annotations"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-core"
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
    }
    implementation libraries.snakeyaml
    implementation libraries.tomcat_embed_core
    implementation libraries.tomcat_embed_el
    implementation libraries.tomcat_embed_websocket
    implementation libraries.spring_context_support
    implementation libraries.spring_messaging
    implementation libraries.spring_webflux
    implementation libraries.spring_websocket
    implementation libraries.spring_boot_starter_webflux
    implementation libraries.spring_boot_starter_websocket
    implementation libraries.spring_boot_starter_aop
    implementation libraries.spring_boot_starter_validation
    implementation libraries.spring_boot_starter_security
    implementation libraries.zowe_attls
    implementation libraries.spring_cloud_commons
    implementation(libraries.spring_cloud_starter_bootstrap) {
        transitive false
    }
    implementation libraries.spring_cloud_starter_hystrix
    implementation libraries.spring_cloud_hystrix_dashboard
    implementation libraries.spring_security_web
    implementation libraries.spring_security_config
    implementation libraries.spring_security_core
    implementation libraries.spring_security_crypto

    implementation libraries.gson
    compileOnly libraries.lombok
    annotationProcessor libraries.lombok

    testImplementation(libraries.spring_boot_starter_test) {
        exclude group: "org.springframework", module: "spring-test"
    }
    testImplementation libraries.spring_test
    testImplementation libraries.json_smart
}


bootJar.archiveFileName = "${bootJar.baseName}.jar"

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact bootJar
        }
    }
}
