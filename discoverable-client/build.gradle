buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6302
def debugPort = 5122
def componentName = "discoverable-client"

setJib(componentName, javaAgentPort, debugPort)

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by: System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number: System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine: InetAddress.localHost.hostName
            ]
        }
    }
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }

    debugOptions {
        port = 5012
        suspend = false
        server = true
    }

    workingDir = project.rootDir

    systemProperties = System.properties
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    api project(':onboarding-enabler-java')
    api project(':onboarding-enabler-spring')
    api project(':zaas-client')
    api project(':apiml-tomcat-common')

    implementation libs.spring.doc
    implementation libs.spring.boot.starter
    implementation libs.spring.boot.starter.actuator
    implementation libs.snakeyaml
    implementation libs.spring.boot.starter.webflux

    implementation libs.spring.boot.starter.websocket
    implementation libs.spring.boot.starter.validation
    implementation libs.spring.boot.starter.security
    implementation libs.spring.boot.starter.aop
    implementation libs.zowe.zos.utils
    implementation libs.spring.cloud.commons
    implementation libs.spring.cloud.starter.bootstrap
    implementation libs.spring.cloud.starter.hystrix
    implementation libs.spring.cloud.hystrix.dashboard
    implementation libs.spring.security.web
    implementation libs.spring.security.config
    implementation libs.spring.security.core
    implementation libs.spring.security.crypto
    implementation libs.tomcat.embed.core
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jquery

    implementation libs.gson
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testImplementation libs.spring.boot.starter.test
    testImplementation libs.json.smart
}


bootJar.archiveFileName = bootJar.archiveBaseName.get() + ".jar"
