buildscript {
    repositories mavenRepositories
    dependencies {
        classpath libs.spring.boot.gradle.plugin
        classpath libs.jgit
    }
}

plugins {
    alias(libs.plugins.gradle.git.properties)
}

normalization {
    runtimeClasspath {
        ignore("**/*git.properties*")
        ignore("**/*build-info.properties*")
    }
}

apply plugin: 'org.springframework.boot'
apply from: "$projectDir/gradle/lite.gradle"
apply plugin: 'com.google.cloud.tools.jib'
apply from: "../gradle/jib.gradle"

def javaAgentPort = 6301
def debugPort = 5120
def componentName = "zaas-service"

setJib(componentName, javaAgentPort, debugPort)
jib.container.mainClass = 'org.zowe.apiml.zaas.ZaasApplication'

ext['netty.version'] = libs.versions.netty.get()

springBoot {
    // This statement tells the Gradle Spring Boot plugin to generate a file
    // build/resources/main/META-INF/build-info.properties that is picked up by Spring Boot to display
    // via /info endpoint
    buildInfo {
        properties {
            // Generate extra build info:
            additional = [
                by             : System.properties['user.name'],
                operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                number         : System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : "n/a",
                machine        : InetAddress.localHost.hostName
            ]
        }
    }
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/${name}/build/resources/main/META-INF")
}

dependencies {
    api project(':apiml-security-common')
    api project(':apiml-tomcat-common')
    api project(':apiml-extension-loader')

    implementation libs.zowe.zos.utils
    implementation libs.spring.boot.starter.webflux
    implementation libs.spring.boot.starter.actuator
    implementation libs.spring.boot.starter.web
    implementation libs.spring.boot.starter.cache
    implementation libs.spring.boot.starter.aop
    implementation libs.spring.boot.starter.security
    implementation libs.spring.cloud.starter.eureka.client
    implementation libs.spring.retry

    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jaxbApi
    implementation libs.spring.cloud.commons
    implementation libs.jjwt
    implementation libs.nimbus.jose.jwt
    implementation libs.spring.doc
    implementation libs.swagger3.parser

    implementation libs.logback.classic

    implementation libs.apache.commons.lang3
    implementation libs.commons.io
    implementation libs.spring.context
    implementation libs.spring.context.support
    implementation libs.spring.web
    implementation libs.spring.webmvc
    implementation libs.spring.webflux

    implementation(libs.eh.cache) {
        exclude group: "jakarta.xml.bind", module: "jakarta.xml.bind-api"
    }

    implementation libs.bundles.jaxb

    implementation libs.guava

    implementation libs.caffeine

    implementation libs.jjwt.impl
    implementation libs.jjwt.jackson

    compileOnly libs.lombok
    annotationProcessor libs.lombok
    annotationProcessor libs.spring.boot.configuration.processor

    testImplementation libs.awaitility
    testImplementation libs.mockito.core
    testImplementation libs.mockito.inline
    testImplementation libs.spring.mock.mvc
    testImplementation libs.spring.boot.starter.test
    testImplementation libs.rest.assured
    testImplementation libs.rest.assured.json.path
    testImplementation libs.rest.assured.xml.path

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok

    testImplementation(testFixtures(project(":apiml-common")))
}

bootJar {
    archiveFileName = "zaas-service.jar"
    manifest {
        attributes 'Main-Class': 'org.springframework.boot.loader.launch.PropertiesLauncher'
    }
    archiveClassifier = "application"
}

jar {
    enabled true
    archiveClassifier = ""
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }

    jvmArgs([
        '--add-opens=java.base/java.nio.channels.spi=ALL-UNNAMED',
        '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens=java.base/java.io=ALL-UNNAMED',
        '--add-opens=java.base/java.util=ALL-UNNAMED',
        '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.invoke=ALL-UNNAMED',
        '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens=java.base/javax.net.ssl=ALL-UNNAMED',
        '--add-opens=java.base/java.net=ALL-UNNAMED'
    ])

    debugOptions {
        port = 5023
        suspend = false
        server = true
    }

    systemProperties = System.properties
}

publishing {
    publications {
        mavenJavaFat(MavenPublication) {
            groupId = 'org.zowe.apiml'
            artifactId = 'zaas-fat-jar'

            artifact bootJar
        }
    }
}
